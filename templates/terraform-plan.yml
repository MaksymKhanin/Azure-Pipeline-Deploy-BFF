parameters:
  - name: EnvironmentName
    type: string
  - name: AzureConnectionName
    type: string
  - name: TerraformVersion
    type: string
  - name: TerraformRoot
    type: string
  - name: TerraformVariables
    type: object
    default: []
  - name: ComponentName
    type: string

steps:
  - task: TerraformInstaller@0
    displayName: Install terraform
    inputs:
      terraformVersion: ${{ parameters.TerraformVersion }}

  - task: AzureCLI@2
    displayName: Terraform plan
    name: tf_plan_output
    env:
      ENVIRONMENT_NAME: ${{ parameters.EnvironmentName }}
      COMPONENT_NAME: ${{ parameters.ComponentName }}
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      BASE_URL: $(System.TeamFoundationCollectionUri)$(System.TeamProjectId)
      REPOSITORY_NAME: $(Build.Repository.Name)
      PULL_REQUEST_ID: $(System.PullRequest.PullRequestId)
      ${{ each item in parameters.TerraformVariables }}:
        ${{ format('TF_VAR_{0}', item.name) }}: ${{ item.value }}
    inputs:
      azureSubscription: ${{ parameters.AzureConnectionName }}
      scriptType: bash
      scriptLocation: inlineScript
      addSpnToEnvironment: true
      workingDirectory: ${{ parameters.TerraformRoot }}
      failOnStandardError: true
      inlineScript: |
        set -e
        echo "Setting Azure environment variables"
        export ARM_CLIENT_ID=${servicePrincipalId}
        export ARM_CLIENT_SECRET=${servicePrincipalKey}
        export ARM_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
        export ARM_TENANT_ID=${tenantId}

        echo "Run terraform init on environment ${ENVIRONMENT_NAME}"
        terraform init -reconfigure -upgrade -backend-config=environments/${ENVIRONMENT_NAME}/backend.config

        echo "Run terraform validate..."
        terraform validate

        set +e
        echo "Run terraform plan..."
        terraform plan -var-file=environments/${ENVIRONMENT_NAME}/variables.tfvars -input=false -detailed-exitcode -out=tfplan
        terraform_exitcode=$?
        echo "Terraform plan exited with status code ${terraform_exitcode}"

        if [ ${terraform_exitcode} -eq 0 ]; then
          echo "No changes detected"
          echo "##vso[task.setvariable variable=terraform_has_changes;isOutput=true;]False"
        else
          if [ ${terraform_exitcode} -eq 2 ]; then
            echo "Terraform succeeded with updates"
            echo "##vso[task.setvariable variable=terraform_has_changes;isOutput=true;]True"
          else
            echo "ERROR: terraform exited with code ${terraform_exitcode}"
            exit 1
          fi
        fi

        echo "Posting plan to PR comment..."
        echo "Fetch terraform plan..."
        tfOutput=`terraform show tfplan -no-color`
        read -r -d '' markdown <<MD
          #   ⚙️    ${COMPONENT_NAME} - Terraform plan   ⚙️
          \`\`\`
          ${tfOutput}
        MD
        # echo "${tfOutput}"

        echo "Building payload..."
        jsonString=`jq -n \
          --arg parentCommentId 0 \
          --arg content "${markdown}" \
          --arg commentType "system" \
          --arg status 4 \
          '{comments: [{ parentCommentId: $parentCommentId, content: $content, commentType: $commentType}], status: $status}' \
        `
        # echo "${jsonString}"

        echo "Building url..."
        url="${BASE_URL}/_apis/git/repositories/${REPOSITORY_NAME}/pullRequests/${PULL_REQUEST_ID}/threads?api-version=6.0"
        # echo "${url}"

        echo "Posting comment..."
        curl -o /dev/null -X POST --data "$jsonString" --silent \
          --header 'content-type: application/json' \
          --header "authorization: Bearer ${SYSTEM_ACCESSTOKEN}" \
          $url
